// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty;

  (function(root, factory) {
    if (typeof exports === "object") {
      return module.exports = factory();
    } else if (typeof define === "function" && define.amd) {
      return define(function() {
        return root.Blobber = factory();
      });
    } else {
      return root.Blobber = factory();
    }
  })(this, function() {
    var Blobber, FS_SIZE, basename;
    FS_SIZE = 20 * 1024 * 1024;
    basename = function(path) {
      return path.replace(/^.*[\/\\]/g, '');
    };
    Blobber = (function() {
      function Blobber() {}

      Blobber.prototype.download = function(fileUrl, fileName, cb) {
        var BlobBuilder, blobber, xhr;
        if (fileName == null) {
          fileName = false;
        }
        blobber = this;
        window.URL = window.URL || window.webkitURL;
        BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder;
        if (!fileName) {
          fileName = basename(fileUrl);
        }
        xhr = new XMLHttpRequest();
        xhr.open("GET", fileUrl, true);
        xhr.responseType = "blob";
        xhr.onload = function(e) {
          var blob, type;
          if (this.status === 200) {
            type = this.getResponseHeader("content-type");
            blob = this.response;
            return blobber.blobToFile(blob, fileName, function(err, file) {
              if (err) {
                cb(err);
                return;
              }
              return cb(null, file);
            });
          } else {
            return cb(this.status);
          }
        };
        return xhr.send();
      };

      Blobber.prototype.uploadProgress = function(hdl) {
        return this._on_uploadProgress = hdl;
      };

      Blobber.prototype.upload = function(url, formFields, cb) {
        var data, name, upload, val, xhr,
          _this = this;
        data = new FormData;
        for (name in formFields) {
          if (!__hasProp.call(formFields, name)) continue;
          val = formFields[name];
          if (val != null) {
            data.append(name, val);
          }
        }
        xhr = new XMLHttpRequest();
        xhr.open("POST", url, true);
        upload = xhr.upload;
        if (this._on_uploadProgress != null) {
          upload.addEventListener('progress', function(e) {
            return _this._on_uploadProgress(e, e.loaded / e.total);
          });
        }
        xhr.onload = function(e) {
          if (this.status === 200) {
            console.log(e, this);
            return cb(null, this.response);
          } else {
            return cb(this.status);
          }
        };
        return xhr.send(data);
      };

      Blobber.prototype.blobToFile = function(blob, fileName, cb) {
        var onCreateFileError, onReadFileError, onRequestFsError, onWriteFileError;
        onRequestFsError = function(e) {
          return cb(e);
        };
        onCreateFileError = function(e) {
          return cb(e);
        };
        onWriteFileError = function(e) {
          return cb(e);
        };
        onReadFileError = function(e) {
          return cb(e);
        };
        return window.webkitRequestFileSystem(window.TEMPORARY, FS_SIZE, (function(fs) {
          return fs.root.getFile(fileName, {
            create: true
          }, (function(fileEntry) {
            return fileEntry.createWriter(function(writer) {
              writer.onwrite = function() {
                return fileEntry.file((function(f) {
                  return cb(null, f);
                }), onReadFileError);
              };
              writer.onerror = onWriteFileError;
              return writer.write(blob);
            });
          }), onCreateFileError);
        }), onRequestFsError);
      };

      return Blobber;

    })();
    return Blobber;
  });

}).call(this);
